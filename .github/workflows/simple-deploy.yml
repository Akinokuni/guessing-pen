name: 简化部署流程

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  # 阿里云ACR配置
  ACR_REGISTRY: crpi-1dj58zvwo0jdkh2y.cn-shenzhen.personal.cr.aliyuncs.com
  ACR_NAMESPACE: guessing-pen
  
  # 镜像名称
  FRONTEND_IMAGE: guessing-pen-frontend
  API_IMAGE: guessing-pen-api
  
  # Node.js版本
  NODE_VERSION: '18'

jobs:
  # 代码质量检查和测试
  test:
    name: 代码检查和测试
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 设置Node.js环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 安装依赖
        run: npm ci
        env:
          NODE_ENV: development
      
      - name: 验证ESLint安装
        run: |
          echo "检查ESLint是否可用..."
          npx eslint --version || echo "ESLint未找到，尝试重新安装..."
          if ! command -v eslint &> /dev/null; then
            echo "直接安装ESLint..."
            npm install eslint --no-save
          fi
      
      - name: 代码格式检查
        run: npm run lint:ci
        continue-on-error: false
      
      - name: TypeScript类型检查
        run: npx tsc --noEmit
        continue-on-error: false
      
      - name: 构建应用
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            package.json
            package-lock.json
          retention-days: 1

  # Docker镜像构建和推送
  build-and-push:
    name: 构建并推送镜像
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 登录阿里云ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: 生成镜像标签
        id: meta
        run: |
          # 获取Git信息
          GIT_COMMIT=$(git rev-parse --short HEAD)
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          
          # 设置镜像名称
          FRONTEND_IMAGE_FULL="${{ env.ACR_REGISTRY }}/${{ env.ACR_NAMESPACE }}/${{ env.FRONTEND_IMAGE }}"
          API_IMAGE_FULL="${{ env.ACR_REGISTRY }}/${{ env.ACR_NAMESPACE }}/${{ env.API_IMAGE }}"
          
          # 输出变量
          echo "frontend-image=$FRONTEND_IMAGE_FULL" >> $GITHUB_OUTPUT
          echo "api-image=$API_IMAGE_FULL" >> $GITHUB_OUTPUT
          echo "git-commit=$GIT_COMMIT" >> $GITHUB_OUTPUT
          echo "build-date=$BUILD_DATE" >> $GITHUB_OUTPUT
      
      - name: 构建并推送前端镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.meta.outputs.frontend-image }}:latest
            ${{ steps.meta.outputs.frontend-image }}:${{ steps.meta.outputs.git-commit }}
          build-args: |
            BUILD_DATE=${{ steps.meta.outputs.build-date }}
            GIT_COMMIT=${{ steps.meta.outputs.git-commit }}
            NODE_ENV=production
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 构建并推送API镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.api
          push: true
          tags: |
            ${{ steps.meta.outputs.api-image }}:latest
            ${{ steps.meta.outputs.api-image }}:${{ steps.meta.outputs.git-commit }}
          build-args: |
            BUILD_DATE=${{ steps.meta.outputs.build-date }}
            GIT_COMMIT=${{ steps.meta.outputs.git-commit }}
            NODE_ENV=production
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 输出镜像信息
        run: |
          echo "🎉 镜像构建完成！"
          echo "前端镜像: ${{ steps.meta.outputs.frontend-image }}:latest"
          echo "API镜像: ${{ steps.meta.outputs.api-image }}:latest"
          echo "Git提交: ${{ steps.meta.outputs.git-commit }}"

  # 简单部署（如果有服务器的话）
  deploy:
    name: 部署到服务器
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 部署到服务器
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            set -e
            
            echo "🚀 开始部署..."
            
            # 进入项目目录
            cd /opt/guessing-pen || { echo "项目目录不存在"; exit 1; }
            
            # 登录ACR
            echo "🔑 登录阿里云ACR..."
            echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ env.ACR_REGISTRY }} -u "${{ secrets.ACR_USERNAME }}" --password-stdin
            
            # 拉取最新镜像
            echo "📦 拉取最新镜像..."
            docker pull ${{ env.ACR_REGISTRY }}/${{ env.ACR_NAMESPACE }}/${{ env.FRONTEND_IMAGE }}:latest
            docker pull ${{ env.ACR_REGISTRY }}/${{ env.ACR_NAMESPACE }}/${{ env.API_IMAGE }}:latest
            
            # 停止旧服务
            echo "⏹️ 停止旧服务..."
            docker-compose -f docker-compose.prod.yml down || true
            
            # 启动新服务
            echo "▶️ 启动新服务..."
            docker-compose -f docker-compose.prod.yml up -d
            
            # 简单验证
            echo "🔍 等待服务启动..."
            sleep 10
            
            # 检查容器状态
            if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
              echo "✅ 部署成功！服务正在运行"
            else
              echo "❌ 部署可能有问题，请检查容器状态"
              docker-compose -f docker-compose.prod.yml ps
              exit 1
            fi
            
            echo "🎉 部署完成！"

  # 部署通知
  notify:
    name: 部署通知
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy]
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 发送部署通知
        run: |
          # 确定部署状态
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            STATUS="✅ 成功"
          elif [[ "${{ needs.deploy.result }}" == "skipped" ]]; then
            STATUS="⏭️ 跳过（仅构建镜像）"
          else
            STATUS="❌ 失败"
          fi
          
          echo "🚀 **旮旯画师部署通知**"
          echo ""
          echo "**状态**: ${STATUS}"
          echo "**分支**: ${{ github.ref_name }}"
          echo "**提交**: ${{ github.sha }}"
          echo "**触发者**: ${{ github.actor }}"
          echo "**时间**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "**查看详情**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

# 工作流级别的环境变量和配置
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true