name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*.*.*']
  pull_request:
    branches: [main, develop]

env:
  # 阿里云ACR配置
  ACR_REGISTRY: registry.cn-hangzhou.aliyuncs.com
  ACR_NAMESPACE: guessing-pen
  
  # 镜像名称
  FRONTEND_IMAGE: guessing-pen-frontend
  API_IMAGE: guessing-pen-api
  
  # Node.js版本
  NODE_VERSION: '18'

jobs:
  # 代码质量检查和测试
  test:
    name: 代码检查和测试
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 设置Node.js环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 安装依赖
        run: |
          npm ci
      
      - name: 代码格式检查
        run: |
          npm run lint
        continue-on-error: false
      
      - name: TypeScript类型检查
        run: |
          npm run type-check
        continue-on-error: false
      
      - name: 运行单元测试
        run: |
          npm run test:unit
        continue-on-error: false
      
      - name: 构建应用
        run: |
          npm run build
        env:
          NODE_ENV: production
      
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            package.json
            package-lock.json
          retention-days: 1

  # Docker镜像构建
  build:
    name: 构建Docker镜像
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    outputs:
      frontend-image: ${{ steps.meta.outputs.frontend-image }}
      api-image: ${{ steps.meta.outputs.api-image }}
      version: ${{ steps.meta.outputs.version }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 登录阿里云ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: 生成镜像元数据
        id: meta
        run: |
          # 获取Git信息
          GIT_COMMIT=$(git rev-parse --short HEAD)
          GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || echo "")
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          
          # 生成版本标签
          if [[ -n "$GIT_TAG" ]]; then
            VERSION="$GIT_TAG"
          elif [[ "$GIT_BRANCH" == "main" ]]; then
            VERSION="main-$GIT_COMMIT"
          else
            VERSION="$GIT_BRANCH-$GIT_COMMIT"
          fi
          
          # 设置镜像名称
          FRONTEND_IMAGE_FULL="${{ env.ACR_REGISTRY }}/${{ env.ACR_NAMESPACE }}/${{ env.FRONTEND_IMAGE }}"
          API_IMAGE_FULL="${{ env.ACR_REGISTRY }}/${{ env.ACR_NAMESPACE }}/${{ env.API_IMAGE }}"
          
          # 输出变量
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "frontend-image=$FRONTEND_IMAGE_FULL" >> $GITHUB_OUTPUT
          echo "api-image=$API_IMAGE_FULL" >> $GITHUB_OUTPUT
          echo "git-commit=$GIT_COMMIT" >> $GITHUB_OUTPUT
          echo "git-branch=$GIT_BRANCH" >> $GITHUB_OUTPUT
          echo "git-tag=$GIT_TAG" >> $GITHUB_OUTPUT
          echo "build-date=$BUILD_DATE" >> $GITHUB_OUTPUT
          
          # 生成标签列表
          TAGS="$VERSION"
          if [[ "$GIT_BRANCH" == "main" ]]; then
            TAGS="$TAGS,latest"
          fi
          if [[ -n "$GIT_TAG" ]]; then
            TAGS="$TAGS,latest"
          fi
          
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
      
      - name: 构建并推送前端镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.meta.outputs.frontend-image }}:${{ steps.meta.outputs.version }}
            ${{ steps.meta.outputs.frontend-image }}:latest
          build-args: |
            BUILD_DATE=${{ steps.meta.outputs.build-date }}
            VERSION=${{ steps.meta.outputs.version }}
            GIT_COMMIT=${{ steps.meta.outputs.git-commit }}
            GIT_BRANCH=${{ steps.meta.outputs.git-branch }}
            GIT_TAG=${{ steps.meta.outputs.git-tag }}
            NODE_ENV=production
          labels: |
            org.opencontainers.image.created=${{ steps.meta.outputs.build-date }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}
            org.opencontainers.image.revision=${{ steps.meta.outputs.git-commit }}
            org.opencontainers.image.title=旮旯画师前端
            org.opencontainers.image.description=AI艺术鉴别游戏前端应用
            org.opencontainers.image.vendor=Guessing Pen Team
            maintainer=Guessing Pen Team
            git.commit=${{ steps.meta.outputs.git-commit }}
            git.branch=${{ steps.meta.outputs.git-branch }}
            git.tag=${{ steps.meta.outputs.git-tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 构建并推送API镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.api
          push: true
          tags: |
            ${{ steps.meta.outputs.api-image }}:${{ steps.meta.outputs.version }}
            ${{ steps.meta.outputs.api-image }}:latest
          build-args: |
            BUILD_DATE=${{ steps.meta.outputs.build-date }}
            VERSION=${{ steps.meta.outputs.version }}
            GIT_COMMIT=${{ steps.meta.outputs.git-commit }}
            GIT_BRANCH=${{ steps.meta.outputs.git-branch }}
            GIT_TAG=${{ steps.meta.outputs.git-tag }}
            NODE_ENV=production
          labels: |
            org.opencontainers.image.created=${{ steps.meta.outputs.build-date }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}
            org.opencontainers.image.revision=${{ steps.meta.outputs.git-commit }}
            org.opencontainers.image.title=旮旯画师API
            org.opencontainers.image.description=AI艺术鉴别游戏API服务
            org.opencontainers.image.vendor=Guessing Pen Team
            maintainer=Guessing Pen Team
            git.commit=${{ steps.meta.outputs.git-commit }}
            git.branch=${{ steps.meta.outputs.git-branch }}
            git.tag=${{ steps.meta.outputs.git-tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 镜像安全扫描
        run: |
          echo "🔍 镜像安全扫描..."
          # 这里可以集成安全扫描工具，如 Trivy
          # docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          #   aquasec/trivy image ${{ steps.meta.outputs.frontend-image }}:${{ steps.meta.outputs.version }}
          echo "✅ 安全扫描完成"

  # 部署到云服务器
  deploy:
    name: 部署到云服务器
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: ${{ vars.PRODUCTION_URL }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 部署到云服务器
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            set -e
            
            # 导入部署脚本
            cd /opt/guessing-pen
            source scripts/deployment/logger.sh
            source scripts/deployment/deployment-tracker.sh
            source scripts/deployment/health-monitor.sh
            source scripts/deployment/notification-system.sh
            
            # 开始部署跟踪
            DEPLOYMENT_ID=$(start_deployment_tracking "${{ needs.build.outputs.version }}" "production" "auto")
            log_deployment_start "${{ needs.build.outputs.version }}" "production"
            
            # 发送部署开始通知
            notify_deployment_start "${{ needs.build.outputs.version }}" "production" "${{ github.ref_name }}" "${{ github.sha }}" "${{ github.actor }}"
            
            # 记录环境信息
            log_environment_info
            
            # 设置变量
            ACR_REGISTRY="${{ env.ACR_REGISTRY }}"
            ACR_NAMESPACE="${{ env.ACR_NAMESPACE }}"
            VERSION="${{ needs.build.outputs.version }}"
            FRONTEND_IMAGE="${{ needs.build.outputs.frontend-image }}"
            API_IMAGE="${{ needs.build.outputs.api-image }}"
            
            DEPLOYMENT_START_TIME=$(date +%s)
            
            # 步骤1: 登录ACR
            log_step_start 1 "登录阿里云ACR"
            update_deployment_step "acr_login" "in_progress" "正在登录阿里云ACR"
            
            if echo "${{ secrets.ACR_PASSWORD }}" | docker login $ACR_REGISTRY -u "${{ secrets.ACR_USERNAME }}" --password-stdin; then
              log_step_end 1 "ACR登录成功"
              update_deployment_step "acr_login" "success" "ACR登录成功"
            else
              log_error "ACR登录失败"
              update_deployment_step "acr_login" "failed" "ACR登录失败"
              add_deployment_error "ACR登录失败" "acr_login"
              notify_deployment_failure "${{ needs.build.outputs.version }}" "production" "acr_login" "ACR登录失败" "$(get_log_file)"
              exit 1
            fi
            
            # 步骤2: 拉取镜像
            log_step_start 2 "拉取最新镜像"
            update_deployment_step "image_pull" "in_progress" "正在拉取镜像"
            
            PULL_START_TIME=$(date +%s)
            if docker pull "${FRONTEND_IMAGE}:${VERSION}" && docker pull "${API_IMAGE}:${VERSION}"; then
              PULL_DURATION=$(($(date +%s) - PULL_START_TIME))
              log_step_end 2 "镜像拉取成功" "${PULL_DURATION}"
              update_deployment_step "image_pull" "success" "镜像拉取成功" "${PULL_DURATION}"
              
              # 更新镜像标签
              docker tag "${FRONTEND_IMAGE}:${VERSION}" "${FRONTEND_IMAGE}:latest"
              docker tag "${API_IMAGE}:${VERSION}" "${API_IMAGE}:latest"
            else
              log_error "镜像拉取失败"
              update_deployment_step "image_pull" "failed" "镜像拉取失败"
              add_deployment_error "镜像拉取失败" "image_pull"
              notify_deployment_failure "${{ needs.build.outputs.version }}" "production" "image_pull" "镜像拉取失败" "$(get_log_file)"
              exit 1
            fi
            
            # 步骤3: 备份当前部署
            log_step_start 3 "备份当前部署信息"
            update_deployment_step "backup" "in_progress" "正在备份当前部署"
            
            mkdir -p /opt/guessing-pen/backups
            BACKUP_FILE="/opt/guessing-pen/backups/deployment-$(date +%Y%m%d-%H%M%S).json"
            
            # 备份容器状态
            docker-compose -f docker-compose.prod.yml ps --format json > "${BACKUP_FILE}" 2>/dev/null || echo '[]' > "${BACKUP_FILE}"
            
            # 备份当前版本信息
            if [[ -f "/opt/guessing-pen/deployment-info.json" ]]; then
              cp "/opt/guessing-pen/deployment-info.json" "/opt/guessing-pen/backups/previous-deployment-$(date +%Y%m%d-%H%M%S).json"
            fi
            
            log_step_end 3 "备份完成"
            update_deployment_step "backup" "success" "备份完成"
            
            # 步骤4: 停止旧服务
            log_step_start 4 "停止旧服务"
            update_deployment_step "service_stop" "in_progress" "正在停止旧服务"
            
            STOP_START_TIME=$(date +%s)
            if docker-compose -f docker-compose.prod.yml down --remove-orphans; then
              STOP_DURATION=$(($(date +%s) - STOP_START_TIME))
              log_step_end 4 "服务停止成功" "${STOP_DURATION}"
              update_deployment_step "service_stop" "success" "服务停止成功" "${STOP_DURATION}"
            else
              log_warning "服务停止时出现警告，继续部署"
              update_deployment_step "service_stop" "warning" "服务停止时出现警告"
              add_deployment_warning "服务停止时出现警告" "service_stop"
            fi
            
            # 步骤5: 清理旧镜像
            log_step_start 5 "清理旧镜像"
            update_deployment_step "cleanup" "in_progress" "正在清理旧镜像"
            
            # 保留最近3个版本的镜像
            docker images "${FRONTEND_IMAGE}" --format "table {{.Tag}}\t{{.ID}}" | grep -v latest | tail -n +4 | awk '{print $2}' | xargs -r docker rmi 2>/dev/null || true
            docker images "${API_IMAGE}" --format "table {{.Tag}}\t{{.ID}}" | grep -v latest | tail -n +4 | awk '{print $2}' | xargs -r docker rmi 2>/dev/null || true
            
            log_step_end 5 "镜像清理完成"
            update_deployment_step "cleanup" "success" "镜像清理完成"
            
            # 步骤6: 启动新服务
            log_step_start 6 "启动新服务"
            update_deployment_step "service_start" "in_progress" "正在启动新服务"
            
            START_TIME=$(date +%s)
            if docker-compose -f docker-compose.prod.yml up -d; then
              START_DURATION=$(($(date +%s) - START_TIME))
              log_step_end 6 "服务启动成功" "${START_DURATION}"
              update_deployment_step "service_start" "success" "服务启动成功" "${START_DURATION}"
            else
              log_error "服务启动失败"
              update_deployment_step "service_start" "failed" "服务启动失败"
              add_deployment_error "服务启动失败" "service_start"
              notify_deployment_failure "${{ needs.build.outputs.version }}" "production" "service_start" "服务启动失败" "$(get_log_file)"
              exit 1
            fi
            
            # 步骤7: 等待服务就绪
            log_step_start 7 "等待服务就绪"
            update_deployment_step "service_ready" "in_progress" "正在等待服务就绪"
            
            if wait_for_services 120 10; then
              log_step_end 7 "服务就绪检查通过"
              update_deployment_step "service_ready" "success" "服务就绪检查通过"
            else
              log_error "服务就绪检查失败"
              update_deployment_step "service_ready" "failed" "服务就绪检查失败"
              add_deployment_error "服务就绪检查失败" "service_ready"
              notify_deployment_failure "${{ needs.build.outputs.version }}" "production" "service_ready" "服务就绪检查失败" "$(get_log_file)"
              exit 1
            fi
            
            # 步骤8: 健康检查
            log_step_start 8 "执行健康检查"
            update_deployment_step "health_check" "in_progress" "正在执行健康检查"
            
            HEALTH_START_TIME=$(date +%s)
            if perform_health_check; then
              HEALTH_DURATION=$(($(date +%s) - HEALTH_START_TIME))
              log_step_end 8 "健康检查通过" "${HEALTH_DURATION}"
              update_deployment_step "health_check" "success" "健康检查通过" "${HEALTH_DURATION}"
            else
              log_error "健康检查失败"
              update_deployment_step "health_check" "failed" "健康检查失败"
              add_deployment_error "健康检查失败" "health_check"
              notify_deployment_failure "${{ needs.build.outputs.version }}" "production" "health_check" "健康检查失败" "$(get_log_file)"
              exit 1
            fi
            
            # 步骤9: 记录部署信息
            log_step_start 9 "记录部署信息"
            update_deployment_step "record_info" "in_progress" "正在记录部署信息"
            
            cat > "/opt/guessing-pen/deployment-info.json" << EOF
            {
              "deploymentId": "${DEPLOYMENT_ID}",
              "version": "${VERSION}",
              "deployTime": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')",
              "gitCommit": "${{ github.sha }}",
              "gitBranch": "${{ github.ref_name }}",
              "gitAuthor": "${{ github.actor }}",
              "frontendImage": "${FRONTEND_IMAGE}:${VERSION}",
              "apiImage": "${API_IMAGE}:${VERSION}",
              "deployedBy": "GitHub Actions",
              "workflowRun": "${{ github.run_id }}",
              "workflowUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "environment": "production",
              "status": "success"
            }
            EOF
            
            log_step_end 9 "部署信息记录完成"
            update_deployment_step "record_info" "success" "部署信息记录完成"
            
            # 完成部署跟踪
            TOTAL_DURATION=$(($(date +%s) - DEPLOYMENT_START_TIME))
            finish_deployment_tracking "success" "${TOTAL_DURATION}"
            log_deployment_end "success" "${TOTAL_DURATION}"
            
            # 发送部署成功通知
            notify_deployment_success "${{ needs.build.outputs.version }}" "production" "${TOTAL_DURATION}" "${{ vars.PRODUCTION_URL }}"
            
            # 启动监控系统
            log_info "启动监控系统..."
            if [[ -f "scripts/deployment/monitoring-system.sh" ]]; then
              bash scripts/deployment/monitoring-system.sh restart
            fi
            
            # 收集部署后的日志
            log_info "收集部署后的容器日志..."
            if [[ -f "scripts/deployment/log-collector.sh" ]]; then
              bash scripts/deployment/log-collector.sh collect 10m
            fi
            
            log_success "🎉 部署完成！版本: ${VERSION} (耗时: ${TOTAL_DURATION}秒)"
      
      - name: 部署后验证
        run: |
          echo "🔍 执行部署后验证..."
          
          # 等待服务完全启动
          sleep 10
          
          # 验证前端服务
          if curl -f -s "${{ vars.PRODUCTION_URL }}" > /dev/null; then
            echo "✅ 前端服务验证通过"
          else
            echo "❌ 前端服务验证失败"
            exit 1
          fi
          
          # 验证API服务
          if curl -f -s "${{ vars.PRODUCTION_URL }}/api/health" > /dev/null; then
            echo "✅ API服务验证通过"
          else
            echo "❌ API服务验证失败"
            exit 1
          fi
          
          echo "🎉 部署验证完成！"

  # 部署通知
  notify:
    name: 部署通知
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 发送部署通知
        run: |
          # 确定部署状态
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            STATUS="✅ 成功"
            COLOR="good"
          else
            STATUS="❌ 失败"
            COLOR="danger"
          fi
          
          # 构建通知消息
          MESSAGE="🚀 **旮旯画师部署通知**
          
          **状态**: ${STATUS}
          **版本**: ${{ needs.build.outputs.version }}
          **分支**: ${{ github.ref_name }}
          **提交**: ${{ github.sha }}
          **触发者**: ${{ github.actor }}
          **工作流**: ${{ github.run_id }}
          **时间**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          
          **镜像信息**:
          - 前端: ${{ needs.build.outputs.frontend-image }}:${{ needs.build.outputs.version }}
          - API: ${{ needs.build.outputs.api-image }}:${{ needs.build.outputs.version }}
          
          **查看详情**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          echo "部署通知: ${MESSAGE}"
          
          # 这里可以集成实际的通知服务，如钉钉、企业微信、Slack等
          # curl -X POST -H 'Content-Type: application/json' \
          #   -d "{\"text\": \"${MESSAGE}\"}" \
          #   "${{ secrets.WEBHOOK_URL }}"

# 工作流级别的环境变量和配置
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true